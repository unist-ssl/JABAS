# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import common_pb2 as common__pb2
import worker_to_scheduler_pb2 as worker__to__scheduler__pb2


class WorkerToSchedulerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.RegisterWorker = channel.unary_unary(
                '/WorkerToScheduler/RegisterWorker',
                request_serializer=worker__to__scheduler__pb2.RegisterWorkerRequest.SerializeToString,
                response_deserializer=worker__to__scheduler__pb2.RegisterWorkerResponse.FromString,
                )
        self.Done = channel.unary_unary(
                '/WorkerToScheduler/Done',
                request_serializer=worker__to__scheduler__pb2.DoneRequest.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )
        self.Killed = channel.unary_unary(
                '/WorkerToScheduler/Killed',
                request_serializer=worker__to__scheduler__pb2.KilledRequest.SerializeToString,
                response_deserializer=common__pb2.Empty.FromString,
                )


class WorkerToSchedulerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def RegisterWorker(self, request, context):
        """Registers the worker with the scheduler
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Done(self, request, context):
        """Indicates to the scheduler that a job has completed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def Killed(self, request, context):
        """Indicates to the scheduler that worker was killed
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_WorkerToSchedulerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'RegisterWorker': grpc.unary_unary_rpc_method_handler(
                    servicer.RegisterWorker,
                    request_deserializer=worker__to__scheduler__pb2.RegisterWorkerRequest.FromString,
                    response_serializer=worker__to__scheduler__pb2.RegisterWorkerResponse.SerializeToString,
            ),
            'Done': grpc.unary_unary_rpc_method_handler(
                    servicer.Done,
                    request_deserializer=worker__to__scheduler__pb2.DoneRequest.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
            'Killed': grpc.unary_unary_rpc_method_handler(
                    servicer.Killed,
                    request_deserializer=worker__to__scheduler__pb2.KilledRequest.FromString,
                    response_serializer=common__pb2.Empty.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'WorkerToScheduler', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class WorkerToScheduler(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def RegisterWorker(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerToScheduler/RegisterWorker',
            worker__to__scheduler__pb2.RegisterWorkerRequest.SerializeToString,
            worker__to__scheduler__pb2.RegisterWorkerResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Done(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerToScheduler/Done',
            worker__to__scheduler__pb2.DoneRequest.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def Killed(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/WorkerToScheduler/Killed',
            worker__to__scheduler__pb2.KilledRequest.SerializeToString,
            common__pb2.Empty.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
